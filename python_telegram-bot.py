import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å –º–µ–¥–∏—Ç–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
MEDITATIONS = {
    "1": {
        "mood": "—Ç—Ä–µ–≤–æ–∂–Ω–æ–µ",
        "description": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞ (8 –º–∏–Ω—É—Ç).",
        "audio_link": "https://www.youtube.com/watch?v=RjJhfbJJM2Q"
    },
    "2": {
        "mood": "–≥—Ä—É—Å—Ç–Ω–æ–µ",
        "description": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (6 –º–∏–Ω—É—Ç).",
        "audio_link": "https://www.youtube.com/watch?v=6SE-HFqis4g"
    },
    "3": {
        "mood": "—Å–ø–æ–∫–æ–π–Ω–æ–µ",
        "description": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è (5 –º–∏–Ω—É—Ç).",
        "audio_link": "https://www.youtube.com/watch?v=b-PoulK3Lls"
    }
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
INITIAL_KEYBOARD = [
    ["–°–¢–ê–†–¢"]
]
MAIN_KEYBOARD = [
    ["–°–¢–ê–†–¢", "–ù–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è"],
    ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ú–ï–ù–Æ", callback_data='show_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    reply_keyboard = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π. üé∂ –•–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—É–¥–∏–æ-–º–µ–¥–∏—Ç–∞—Ü–∏—é? –ù–∞–∂–º–∏ –°–¢–ê–†–¢ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ú–ï–ù–Æ.",
            reply_markup=reply_keyboard
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–π. üé∂ –•–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—É–¥–∏–æ-–º–µ–¥–∏—Ç–∞—Ü–∏—é? –ù–∞–∂–º–∏ –°–¢–ê–†–¢ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ú–ï–ù–Æ.",
            reply_markup=reply_keyboard
        )

# –ö–æ–º–∞–Ω–¥–∞ /meditate
async def meditate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["awaiting_mood"] = True
    keyboard = [
        [InlineKeyboardButton("–ú–ï–ù–Æ", callback_data='show_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    reply_keyboard = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
    if update.message:
        await update.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –í—ã–±–µ—Ä–∏:\n1. –¢—Ä–µ–≤–æ–∂–Ω–æ\n2. –ì—Ä—É—Å—Ç–Ω–æ\n3. –°–ø–æ–∫–æ–π–Ω–æ\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3).",
            reply_markup=reply_keyboard
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –í—ã–±–µ—Ä–∏:\n1. –¢—Ä–µ–≤–æ–∂–Ω–æ\n2. –ì—Ä—É—Å—Ç–Ω–æ\n3. –°–ø–æ–∫–æ–π–Ω–æ\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3).",
            reply_markup=reply_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_first_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = ReplyKeyboardMarkup(INITIAL_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏. –ù–∞–∂–º–∏ –°–¢–ê–†–¢, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞! üé∂",
        reply_markup=reply_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∏)
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if context.user_data.get("awaiting_mood"):
        if text not in MEDITATIONS:
            reply_keyboard = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.\n1. –¢—Ä–µ–≤–æ–∂–Ω–æ\n2. –ì—Ä—É—Å—Ç–Ω–æ\n3. –°–ø–æ–∫–æ–π–Ω–æ",
                reply_markup=reply_keyboard
            )
            return

        meditation = MEDITATIONS[text]
        keyboard = [
            [InlineKeyboardButton("–ú–ï–ù–Æ", callback_data='show_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        reply_keyboard = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–ª—è {meditation['mood']} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —è –ø–æ–¥–æ–±—Ä–∞–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é:\n"
            f"{meditation['description']}\n"
            f"–°–ª—É—à–∞–π –µ—ë –∑–¥–µ—Å—å: {meditation['audio_link']}\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
            reply_markup=reply_keyboard
        )
        context.user_data["awaiting_mood"] = False
    elif text == "–°–¢–ê–†–¢":
        await start(update, context)
    elif text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        await start(update, context)
    elif text == "–ù–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è":
        await meditate(update, context)
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        reply_keyboard = ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True)  # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await update.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /start. üé∂", reply_markup=reply_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {query.data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    await query.answer()

    if query.data == 'show_menu':
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start')],
            [InlineKeyboardButton("–ù–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data='meditate')],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='end')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

    elif query.data == 'start':
        await start(update, context)

    elif query.data == 'meditate':
        await meditate(update, context)

    elif query.data == 'end':
        reply_keyboard = ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True)  # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /start. üé∂", reply_markup=reply_keyboard)
        await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞ .env
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("meditate", meditate))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^/"), handle_input))
    application.add_handler(MessageHandler(filters.COMMAND & ~filters.Regex("^/start$|^/meditate$"), handle_first_message))
    application.add_handler(CallbackQueryHandler(button))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()